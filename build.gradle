plugins {
    id "java"
    id "checkstyle"
    id "io.freefair.lombok" version "8.4"
    id "io.spring.dependency-management" version "1.1.4"
    id "org.springframework.boot" version "3.0.2"
}

group = "com.sample"
version = "0.1.0-SNAPSHOT"

ext {
    // https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明#毕业版本依赖关系推荐使用
    springCloudVersion = "2022.0.0"
    springCloudAlibabaVersion = "2022.0.0.0"
    knife4jVersion = "4.3.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://repository.incarcloud.com/content/groups/public" }
}

dependencies {
    implementation "org.slf4j:slf4j-api"

    implementation "org.apache.commons:commons-io"
    implementation "org.apache.commons:commons-lang3"

    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "com.github.xiaoymin:knife4j-openapi3-jakarta-spring-boot-starter"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"

    implementation "org.springframework.boot:spring-boot-starter-data-redis"

    implementation "commons-net:commons-net"
    implementation "dev.samstevens.totp:totp"

    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion"
        mavenBom "com.github.xiaoymin:knife4j-dependencies:$knife4jVersion"
    }

    dependencies {
        dependencySet(group: "org.slf4j", version: "2.0.9") {
            entry "slf4j-api"
            entry "slf4j-simple"
        }

        dependency "org.apache.commons:commons-io:1.3.2"
        dependency "org.apache.commons:commons-lang3:3.14.0"
        dependency "org.apache.commons:commons-collections4:4.4"

        dependency "commons-net:commons-net:3.10.0"
        dependency "dev.samstevens.totp:totp:1.7.1"
    }
}

test {
    useJUnitPlatform()
}

task checkstyle(type: Checkstyle) {
    configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures true
    showViolations true
    source = fileTree("src")
    include "**/*.java"
    exclude "**/test/**"
    exclude "**/build/**"
    classpath = files()
}

task removeLombokConfig() {
    def subProjectPath = project.projectDir
    if (null != subProjectPath) {
        def lombokConfigFile = new File(subProjectPath, "lombok.config")
        if (lombokConfigFile.exists()) {
            lombokConfigFile.delete()
        }
    }
}

task removeOutputLog() {
    def subProjectPath = project.projectDir
    if (null != subProjectPath) {
        subProjectPath.list().each { filename ->
            if (filename.endsWith(".log") || filename.equalsIgnoreCase("logs")) {
                def subPath = new File(subProjectPath, filename)
                if (subPath.isDirectory()) {
                    for (File leafFile : subPath.listFiles()) {
                        leafFile.delete()
                    }
                }
                subPath.delete()
            }
        }
    }
}

defaultTasks "assemble"